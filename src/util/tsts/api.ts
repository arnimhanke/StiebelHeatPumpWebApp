/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * timeseriestoolset-service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:4567/api/timeseriestoolset-api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AccessParameterValuesDto
 */
export interface AccessParameterValuesDto {
    /**
     * 
     * @type {TimeSeriesComposedKey}
     * @memberof AccessParameterValuesDto
     */
    tsComposedKey?: TimeSeriesComposedKey;
    /**
     * 
     * @type {TimeSeriesRaster}
     * @memberof AccessParameterValuesDto
     */
    tsraster?: TimeSeriesRaster;
}

/**
 * 
 * @export
 * @interface AccessParamterHeadDto
 */
export interface AccessParamterHeadDto {
    /**
     * 
     * @type {TimeSeriesComposedKey}
     * @memberof AccessParamterHeadDto
     */
    tsComposedKey?: TimeSeriesComposedKey;
}

/**
 * 
 * @export
 * @interface DeleteParameterHeadDto
 */
export interface DeleteParameterHeadDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteParameterHeadDto
     */
    tsId?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteParameterHeadDto
     */
    databaseName?: string;
}

/**
 * 
 * @export
 * @interface DeleteParameterValuesDto
 */
export interface DeleteParameterValuesDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteParameterValuesDto
     */
    tsId?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteParameterValuesDto
     */
    databaseName?: string;
}

/**
 * 
 * @export
 * @interface Error
 */
export interface Error {
    /**
     * 
     * @type {number}
     * @memberof Error
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof Error
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof Error
     */
    fields?: string;
}

/**
 * 
 * @export
 * @interface PersistenceParameterHeadDto
 */
export interface PersistenceParameterHeadDto {
    /**
     * 
     * @type {TimeSeriesComposedKey}
     * @memberof PersistenceParameterHeadDto
     */
    tsComposedKey?: TimeSeriesComposedKey;
    /**
     * 
     * @type {TimeSeriesRaster}
     * @memberof PersistenceParameterHeadDto
     */
    tsraster?: TimeSeriesRaster;
    /**
     * 
     * @type {TimeSeriesUnit}
     * @memberof PersistenceParameterHeadDto
     */
    tsUnit?: TimeSeriesUnit;
}

/**
 * 
 * @export
 * @interface PersistenceParameterValuesDto
 */
export interface PersistenceParameterValuesDto {
    /**
     * 
     * @type {TimeSeriesComposedKey}
     * @memberof PersistenceParameterValuesDto
     */
    tsComposedKey?: TimeSeriesComposedKey;
    /**
     * 
     * @type {Array<TimeSeriesValue>}
     * @memberof PersistenceParameterValuesDto
     */
    tsvalues?: Array<TimeSeriesValue>;
}

/**
 * 
 * @export
 * @interface TimeSeriesComposedKey
 */
export interface TimeSeriesComposedKey {
    /**
     * 
     * @type {string}
     * @memberof TimeSeriesComposedKey
     */
    tsId?: string;
    /**
     * The Databasename, where the timeseries should be stored. The user must have access to this database, otherwise the timeseries can't be stored!
     * @type {string}
     * @memberof TimeSeriesComposedKey
     */
    databaseName?: string;
}

/**
 * 
 * @export
 * @interface TimeSeriesHead
 */
export interface TimeSeriesHead {
    /**
     * Timeseries ID
     * @type {string}
     * @memberof TimeSeriesHead
     */
    tsId?: string;
    /**
     * The Databasename, where the timeseries should be stored. The user must have access to this database, otherwise the timeseries can't be stored!
     * @type {string}
     * @memberof TimeSeriesHead
     */
    database?: string;
    /**
     * 
     * @type {TimeSeriesRaster}
     * @memberof TimeSeriesHead
     */
    tsRaster?: TimeSeriesRaster;
    /**
     * 
     * @type {TimeSeriesUnit}
     * @memberof TimeSeriesHead
     */
    tsUnit?: TimeSeriesUnit;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum TimeSeriesRaster {
    PT15M = <any> 'PT15M',
    PT1H = <any> 'PT1H',
    P1D = <any> 'P1D'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum TimeSeriesUnit {
    MW = <any> 'mW',
    KW = <any> 'kW',
    EUR = <any> 'EUR'
}

/**
 * 
 * @export
 * @interface TimeSeriesValue
 */
export interface TimeSeriesValue {
    /**
     * 
     * @type {string}
     * @memberof TimeSeriesValue
     */
    time?: string;
    /**
     * 
     * @type {number}
     * @memberof TimeSeriesValue
     */
    value?: number;
}

/**
 * 
 * @export
 * @interface Timeseries
 */
export interface Timeseries {
    /**
     * 
     * @type {TimeSeriesHead}
     * @memberof Timeseries
     */
    timeSeriesHead?: TimeSeriesHead;
    /**
     * 
     * @type {Array<TimeSeriesValue>}
     * @memberof Timeseries
     */
    timeSeriesValues?: Array<TimeSeriesValue>;
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Removes timeseries head. The Timeseries must exists!
         * @param {DeleteParameterHeadDto} [deleteParameterHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeseriesDefinitionByDeleteParameterHeadDto(deleteParameterHeadDto?: DeleteParameterHeadDto, options: any = {}): FetchArgs {
            const localVarPath = `/timeseriesDefinitionByParameter`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['Authorization'] = 'bearer ' + configuration.accessToken;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DeleteParameterHeadDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(deleteParameterHeadDto || {}) : (deleteParameterHeadDto || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes timeseries heads. The Timeseries must exists!
         * @param {Array<DeleteParameterHeadDto>} [deleteParametersHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeseriesDefinitionByDeleteParameterHeadDtos(deleteParametersHeadDto?: Array<DeleteParameterHeadDto>, options: any = {}): FetchArgs {
            const localVarPath = `/timeseriesDefinitionByParameters`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['Authorization'] = 'bearer ' + configuration.accessToken;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;DeleteParameterHeadDto&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(deleteParametersHeadDto || {}) : (deleteParametersHeadDto || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes values of given Timeseries. The Timeseries must exists!
         * @param {DeleteParameterValuesDto} [deleteParameterValuesDto] 
         * @param {string} [interval] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeseriesValuesByDeleteParameterValuesDto(deleteParameterValuesDto?: DeleteParameterValuesDto, interval?: string, options: any = {}): FetchArgs {
            const localVarPath = `/timeseriesValuesByParameter`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['Authorization'] = 'bearer ' + configuration.accessToken;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DeleteParameterValuesDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(deleteParameterValuesDto || {}) : (deleteParameterValuesDto || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes values of given Timeseries. The Timeseries must exists!
         * @param {Array<DeleteParameterValuesDto>} [deleteParametersValuesDto] 
         * @param {string} [interval] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeseriesValuesByDeleteParameterValuesDtos(deleteParametersValuesDto?: Array<DeleteParameterValuesDto>, interval?: string, options: any = {}): FetchArgs {
            const localVarPath = `/timeseriesValuesByParameters`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['Authorization'] = 'bearer ' + configuration.accessToken;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;DeleteParameterValuesDto&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(deleteParametersValuesDto || {}) : (deleteParametersValuesDto || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get timeseries-Definition for requested AccessParamterHeadDto
         * @param {AccessParamterHeadDto} [accessParamterHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeseriesDefinitionByAccessParamterHeadDto(accessParamterHeadDto?: AccessParamterHeadDto, options: any = {}): FetchArgs {
            const localVarPath = `/timeseriesDefinitionByParameter`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['Authorization'] = 'bearer ' + configuration.accessToken;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccessParamterHeadDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(accessParamterHeadDto || {}) : (accessParamterHeadDto || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get timeseries-Definitions for requested AccessParamterHeadDtos
         * @param {Array<AccessParamterHeadDto>} [accessParamtersHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeseriesDefinitionByAccessParamterHeadDtos(accessParamtersHeadDto?: Array<AccessParamterHeadDto>, options: any = {}): FetchArgs {
            const localVarPath = `/timeseriesDefinitionByParameters`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['Authorization'] = 'bearer ' + configuration.accessToken;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;AccessParamterHeadDto&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(accessParamtersHeadDto || {}) : (accessParamtersHeadDto || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get timeseries values for requested AccessParameterValuesDto
         * @param {AccessParameterValuesDto} [accessParameterValuesDto] 
         * @param {string} [interval] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeseriesValuesByAccessParameterValuesDto(accessParameterValuesDto?: AccessParameterValuesDto, interval?: string, options: any = {}): FetchArgs {
            const localVarPath = `/timeseriesValuesByParameter`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['Authorization'] = 'bearer ' + configuration.accessToken;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccessParameterValuesDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(accessParameterValuesDto || {}) : (accessParameterValuesDto || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get timeseries values for requested AccessParameterValuesDtos
         * @param {Array<AccessParameterValuesDto>} [accessParametersValuesDto] 
         * @param {string} [interval] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeseriesValuesByAccessParameterValuesDtos(accessParametersValuesDto?: Array<AccessParameterValuesDto>, interval?: string, options: any = {}): FetchArgs {
            const localVarPath = `/timeseriesValuesByParameters`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['Authorization'] = 'bearer ' + configuration.accessToken;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;AccessParameterValuesDto&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(accessParametersValuesDto || {}) : (accessParametersValuesDto || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new TimeseriesDefinition
         * @param {PersistenceParameterHeadDto} [persistenceParameterHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTimeseriesDefinitionByPersistenceParameterHeadDto(persistenceParameterHeadDto?: PersistenceParameterHeadDto, options: any = {}): FetchArgs {
            const localVarPath = `/timeseriesDefinitionByParameter`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['Authorization'] = 'bearer ' + configuration.accessToken;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PersistenceParameterHeadDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(persistenceParameterHeadDto || {}) : (persistenceParameterHeadDto || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new TimeseriesDefinitions
         * @param {Array<PersistenceParameterHeadDto>} [persistenceParametersHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTimeseriesDefinitionsByPersistenceParameterHeadDtos(persistenceParametersHeadDto?: Array<PersistenceParameterHeadDto>, options: any = {}): FetchArgs {
            const localVarPath = `/timeseriesDefinitionByParameters`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['Authorization'] = 'bearer ' + configuration.accessToken;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;PersistenceParameterHeadDto&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(persistenceParametersHeadDto || {}) : (persistenceParametersHeadDto || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds values to given Timeseries. The Timeseries must exists!
         * @param {PersistenceParameterValuesDto} [persistenceParameterValuesDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTimeseriesValuesByPersistenceParameterValuesDto(persistenceParameterValuesDto?: PersistenceParameterValuesDto, options: any = {}): FetchArgs {
            const localVarPath = `/timeseriesValuesByParameter`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['Authorization'] = 'bearer ' + configuration.accessToken;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PersistenceParameterValuesDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(persistenceParameterValuesDto || {}) : (persistenceParameterValuesDto || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds values to given Timeseries's. All Timeseries's must exists!
         * @param {Array<PersistenceParameterValuesDto>} [persistenceParametersValuesDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTimeseriesValuesByPersistenceParameterValuesDtos(persistenceParametersValuesDto?: Array<PersistenceParameterValuesDto>, options: any = {}): FetchArgs {
            const localVarPath = `/timeseriesValuesByParameters`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['Authorization'] = 'bearer ' + configuration.accessToken;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;PersistenceParameterValuesDto&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(persistenceParametersValuesDto || {}) : (persistenceParametersValuesDto || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Removes timeseries head. The Timeseries must exists!
         * @param {DeleteParameterHeadDto} [deleteParameterHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeseriesDefinitionByDeleteParameterHeadDto(deleteParameterHeadDto?: DeleteParameterHeadDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).deleteTimeseriesDefinitionByDeleteParameterHeadDto(deleteParameterHeadDto, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Removes timeseries heads. The Timeseries must exists!
         * @param {Array<DeleteParameterHeadDto>} [deleteParametersHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeseriesDefinitionByDeleteParameterHeadDtos(deleteParametersHeadDto?: Array<DeleteParameterHeadDto>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).deleteTimeseriesDefinitionByDeleteParameterHeadDtos(deleteParametersHeadDto, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Removes values of given Timeseries. The Timeseries must exists!
         * @param {DeleteParameterValuesDto} [deleteParameterValuesDto] 
         * @param {string} [interval] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeseriesValuesByDeleteParameterValuesDto(deleteParameterValuesDto?: DeleteParameterValuesDto, interval?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).deleteTimeseriesValuesByDeleteParameterValuesDto(deleteParameterValuesDto, interval, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Removes values of given Timeseries. The Timeseries must exists!
         * @param {Array<DeleteParameterValuesDto>} [deleteParametersValuesDto] 
         * @param {string} [interval] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeseriesValuesByDeleteParameterValuesDtos(deleteParametersValuesDto?: Array<DeleteParameterValuesDto>, interval?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).deleteTimeseriesValuesByDeleteParameterValuesDtos(deleteParametersValuesDto, interval, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get timeseries-Definition for requested AccessParamterHeadDto
         * @param {AccessParamterHeadDto} [accessParamterHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeseriesDefinitionByAccessParamterHeadDto(accessParamterHeadDto?: AccessParamterHeadDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TimeSeriesHead> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getTimeseriesDefinitionByAccessParamterHeadDto(accessParamterHeadDto, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get timeseries-Definitions for requested AccessParamterHeadDtos
         * @param {Array<AccessParamterHeadDto>} [accessParamtersHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeseriesDefinitionByAccessParamterHeadDtos(accessParamtersHeadDto?: Array<AccessParamterHeadDto>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<TimeSeriesHead>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getTimeseriesDefinitionByAccessParamterHeadDtos(accessParamtersHeadDto, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get timeseries values for requested AccessParameterValuesDto
         * @param {AccessParameterValuesDto} [accessParameterValuesDto] 
         * @param {string} [interval] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeseriesValuesByAccessParameterValuesDto(accessParameterValuesDto?: AccessParameterValuesDto, interval?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Timeseries> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getTimeseriesValuesByAccessParameterValuesDto(accessParameterValuesDto, interval, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get timeseries values for requested AccessParameterValuesDtos
         * @param {Array<AccessParameterValuesDto>} [accessParametersValuesDto] 
         * @param {string} [interval] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeseriesValuesByAccessParameterValuesDtos(accessParametersValuesDto?: Array<AccessParameterValuesDto>, interval?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Timeseries>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getTimeseriesValuesByAccessParameterValuesDtos(accessParametersValuesDto, interval, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create a new TimeseriesDefinition
         * @param {PersistenceParameterHeadDto} [persistenceParameterHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTimeseriesDefinitionByPersistenceParameterHeadDto(persistenceParameterHeadDto?: PersistenceParameterHeadDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TimeSeriesHead> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).putTimeseriesDefinitionByPersistenceParameterHeadDto(persistenceParameterHeadDto, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create new TimeseriesDefinitions
         * @param {Array<PersistenceParameterHeadDto>} [persistenceParametersHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTimeseriesDefinitionsByPersistenceParameterHeadDtos(persistenceParametersHeadDto?: Array<PersistenceParameterHeadDto>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<TimeSeriesHead>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).putTimeseriesDefinitionsByPersistenceParameterHeadDtos(persistenceParametersHeadDto, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Adds values to given Timeseries. The Timeseries must exists!
         * @param {PersistenceParameterValuesDto} [persistenceParameterValuesDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTimeseriesValuesByPersistenceParameterValuesDto(persistenceParameterValuesDto?: PersistenceParameterValuesDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Timeseries> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).putTimeseriesValuesByPersistenceParameterValuesDto(persistenceParameterValuesDto, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Adds values to given Timeseries's. All Timeseries's must exists!
         * @param {Array<PersistenceParameterValuesDto>} [persistenceParametersValuesDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTimeseriesValuesByPersistenceParameterValuesDtos(persistenceParametersValuesDto?: Array<PersistenceParameterValuesDto>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Timeseries>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).putTimeseriesValuesByPersistenceParameterValuesDtos(persistenceParametersValuesDto, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Removes timeseries head. The Timeseries must exists!
         * @param {DeleteParameterHeadDto} [deleteParameterHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeseriesDefinitionByDeleteParameterHeadDto(deleteParameterHeadDto?: DeleteParameterHeadDto, options?: any) {
            return DefaultApiFp(configuration).deleteTimeseriesDefinitionByDeleteParameterHeadDto(deleteParameterHeadDto, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Removes timeseries heads. The Timeseries must exists!
         * @param {Array<DeleteParameterHeadDto>} [deleteParametersHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeseriesDefinitionByDeleteParameterHeadDtos(deleteParametersHeadDto?: Array<DeleteParameterHeadDto>, options?: any) {
            return DefaultApiFp(configuration).deleteTimeseriesDefinitionByDeleteParameterHeadDtos(deleteParametersHeadDto, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Removes values of given Timeseries. The Timeseries must exists!
         * @param {DeleteParameterValuesDto} [deleteParameterValuesDto] 
         * @param {string} [interval] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeseriesValuesByDeleteParameterValuesDto(deleteParameterValuesDto?: DeleteParameterValuesDto, interval?: string, options?: any) {
            return DefaultApiFp(configuration).deleteTimeseriesValuesByDeleteParameterValuesDto(deleteParameterValuesDto, interval, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Removes values of given Timeseries. The Timeseries must exists!
         * @param {Array<DeleteParameterValuesDto>} [deleteParametersValuesDto] 
         * @param {string} [interval] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeseriesValuesByDeleteParameterValuesDtos(deleteParametersValuesDto?: Array<DeleteParameterValuesDto>, interval?: string, options?: any) {
            return DefaultApiFp(configuration).deleteTimeseriesValuesByDeleteParameterValuesDtos(deleteParametersValuesDto, interval, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get timeseries-Definition for requested AccessParamterHeadDto
         * @param {AccessParamterHeadDto} [accessParamterHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeseriesDefinitionByAccessParamterHeadDto(accessParamterHeadDto?: AccessParamterHeadDto, options?: any) {
            return DefaultApiFp(configuration).getTimeseriesDefinitionByAccessParamterHeadDto(accessParamterHeadDto, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get timeseries-Definitions for requested AccessParamterHeadDtos
         * @param {Array<AccessParamterHeadDto>} [accessParamtersHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeseriesDefinitionByAccessParamterHeadDtos(accessParamtersHeadDto?: Array<AccessParamterHeadDto>, options?: any) {
            return DefaultApiFp(configuration).getTimeseriesDefinitionByAccessParamterHeadDtos(accessParamtersHeadDto, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get timeseries values for requested AccessParameterValuesDto
         * @param {AccessParameterValuesDto} [accessParameterValuesDto] 
         * @param {string} [interval] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeseriesValuesByAccessParameterValuesDto(accessParameterValuesDto?: AccessParameterValuesDto, interval?: string, options?: any) {
            return DefaultApiFp(configuration).getTimeseriesValuesByAccessParameterValuesDto(accessParameterValuesDto, interval, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get timeseries values for requested AccessParameterValuesDtos
         * @param {Array<AccessParameterValuesDto>} [accessParametersValuesDto] 
         * @param {string} [interval] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeseriesValuesByAccessParameterValuesDtos(accessParametersValuesDto?: Array<AccessParameterValuesDto>, interval?: string, options?: any) {
            return DefaultApiFp(configuration).getTimeseriesValuesByAccessParameterValuesDtos(accessParametersValuesDto, interval, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create a new TimeseriesDefinition
         * @param {PersistenceParameterHeadDto} [persistenceParameterHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTimeseriesDefinitionByPersistenceParameterHeadDto(persistenceParameterHeadDto?: PersistenceParameterHeadDto, options?: any) {
            return DefaultApiFp(configuration).putTimeseriesDefinitionByPersistenceParameterHeadDto(persistenceParameterHeadDto, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create new TimeseriesDefinitions
         * @param {Array<PersistenceParameterHeadDto>} [persistenceParametersHeadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTimeseriesDefinitionsByPersistenceParameterHeadDtos(persistenceParametersHeadDto?: Array<PersistenceParameterHeadDto>, options?: any) {
            return DefaultApiFp(configuration).putTimeseriesDefinitionsByPersistenceParameterHeadDtos(persistenceParametersHeadDto, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Adds values to given Timeseries. The Timeseries must exists!
         * @param {PersistenceParameterValuesDto} [persistenceParameterValuesDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTimeseriesValuesByPersistenceParameterValuesDto(persistenceParameterValuesDto?: PersistenceParameterValuesDto, options?: any) {
            return DefaultApiFp(configuration).putTimeseriesValuesByPersistenceParameterValuesDto(persistenceParameterValuesDto, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Adds values to given Timeseries's. All Timeseries's must exists!
         * @param {Array<PersistenceParameterValuesDto>} [persistenceParametersValuesDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTimeseriesValuesByPersistenceParameterValuesDtos(persistenceParametersValuesDto?: Array<PersistenceParameterValuesDto>, options?: any) {
            return DefaultApiFp(configuration).putTimeseriesValuesByPersistenceParameterValuesDtos(persistenceParametersValuesDto, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Removes timeseries head. The Timeseries must exists!
     * @param {DeleteParameterHeadDto} [deleteParameterHeadDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTimeseriesDefinitionByDeleteParameterHeadDto(deleteParameterHeadDto?: DeleteParameterHeadDto, options?: any) {
        return DefaultApiFp(this.configuration).deleteTimeseriesDefinitionByDeleteParameterHeadDto(deleteParameterHeadDto, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Removes timeseries heads. The Timeseries must exists!
     * @param {Array<DeleteParameterHeadDto>} [deleteParametersHeadDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTimeseriesDefinitionByDeleteParameterHeadDtos(deleteParametersHeadDto?: Array<DeleteParameterHeadDto>, options?: any) {
        return DefaultApiFp(this.configuration).deleteTimeseriesDefinitionByDeleteParameterHeadDtos(deleteParametersHeadDto, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Removes values of given Timeseries. The Timeseries must exists!
     * @param {DeleteParameterValuesDto} [deleteParameterValuesDto] 
     * @param {string} [interval] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTimeseriesValuesByDeleteParameterValuesDto(deleteParameterValuesDto?: DeleteParameterValuesDto, interval?: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteTimeseriesValuesByDeleteParameterValuesDto(deleteParameterValuesDto, interval, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Removes values of given Timeseries. The Timeseries must exists!
     * @param {Array<DeleteParameterValuesDto>} [deleteParametersValuesDto] 
     * @param {string} [interval] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTimeseriesValuesByDeleteParameterValuesDtos(deleteParametersValuesDto?: Array<DeleteParameterValuesDto>, interval?: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteTimeseriesValuesByDeleteParameterValuesDtos(deleteParametersValuesDto, interval, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get timeseries-Definition for requested AccessParamterHeadDto
     * @param {AccessParamterHeadDto} [accessParamterHeadDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTimeseriesDefinitionByAccessParamterHeadDto(accessParamterHeadDto?: AccessParamterHeadDto, options?: any) {
        return DefaultApiFp(this.configuration).getTimeseriesDefinitionByAccessParamterHeadDto(accessParamterHeadDto, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get timeseries-Definitions for requested AccessParamterHeadDtos
     * @param {Array<AccessParamterHeadDto>} [accessParamtersHeadDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTimeseriesDefinitionByAccessParamterHeadDtos(accessParamtersHeadDto?: Array<AccessParamterHeadDto>, options?: any) {
        return DefaultApiFp(this.configuration).getTimeseriesDefinitionByAccessParamterHeadDtos(accessParamtersHeadDto, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get timeseries values for requested AccessParameterValuesDto
     * @param {AccessParameterValuesDto} [accessParameterValuesDto] 
     * @param {string} [interval] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTimeseriesValuesByAccessParameterValuesDto(accessParameterValuesDto?: AccessParameterValuesDto, interval?: string, options?: any) {
        return DefaultApiFp(this.configuration).getTimeseriesValuesByAccessParameterValuesDto(accessParameterValuesDto, interval, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get timeseries values for requested AccessParameterValuesDtos
     * @param {Array<AccessParameterValuesDto>} [accessParametersValuesDto] 
     * @param {string} [interval] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTimeseriesValuesByAccessParameterValuesDtos(accessParametersValuesDto?: Array<AccessParameterValuesDto>, interval?: string, options?: any) {
        return DefaultApiFp(this.configuration).getTimeseriesValuesByAccessParameterValuesDtos(accessParametersValuesDto, interval, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create a new TimeseriesDefinition
     * @param {PersistenceParameterHeadDto} [persistenceParameterHeadDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putTimeseriesDefinitionByPersistenceParameterHeadDto(persistenceParameterHeadDto?: PersistenceParameterHeadDto, options?: any) {
        return DefaultApiFp(this.configuration).putTimeseriesDefinitionByPersistenceParameterHeadDto(persistenceParameterHeadDto, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create new TimeseriesDefinitions
     * @param {Array<PersistenceParameterHeadDto>} [persistenceParametersHeadDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putTimeseriesDefinitionsByPersistenceParameterHeadDtos(persistenceParametersHeadDto?: Array<PersistenceParameterHeadDto>, options?: any) {
        return DefaultApiFp(this.configuration).putTimeseriesDefinitionsByPersistenceParameterHeadDtos(persistenceParametersHeadDto, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Adds values to given Timeseries. The Timeseries must exists!
     * @param {PersistenceParameterValuesDto} [persistenceParameterValuesDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putTimeseriesValuesByPersistenceParameterValuesDto(persistenceParameterValuesDto?: PersistenceParameterValuesDto, options?: any) {
        return DefaultApiFp(this.configuration).putTimeseriesValuesByPersistenceParameterValuesDto(persistenceParameterValuesDto, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Adds values to given Timeseries's. All Timeseries's must exists!
     * @param {Array<PersistenceParameterValuesDto>} [persistenceParametersValuesDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putTimeseriesValuesByPersistenceParameterValuesDtos(persistenceParametersValuesDto?: Array<PersistenceParameterValuesDto>, options?: any) {
        return DefaultApiFp(this.configuration).putTimeseriesValuesByPersistenceParameterValuesDtos(persistenceParametersValuesDto, options)(this.fetch, this.basePath);
    }

}

